# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Date

"""ユーザ関連"""
type User {
  "ユーザID"
  id: Int!
  "本名"
  name: String!
  "別称"
  nickname: String!
  "メールアドレス"
  email: String!
}

"""ユーザ認証情報"""
type UserAuth{
    "ユーザID"
    userId: Int!
    "パスワード"
    password: String!
}

"""ログイン用入力"""
input LoginInfo {
    "メールアドレス"
    email:String!
    "パスワード"
    password: String!
}

"""ユーザ作成用入力"""
input NewUser{
    "名前"
    name: String!
    "別名"
    nickName: String!
    "メールアドレス"
    email: String!
    "パスワード"
    password: String!
}

"""グループ"""
type Group{
    "id"
    id: Int!
    "作成者"
    author: Int!
    "グループ名"
    name: String!
}

"""ユーザグループ間要素"""
type Enrollment{
    "id"
    id: Int!
    "ユーザid"
    user_id: Int!
    "グループid"
    group_id: Int!
}

"""グループ作成入力"""
input NewGroup{
    "ユーザID"
    userId: Int!
    "グループ名"
    groupName: String!
    "家計簿名"
    ledgerName: String!
}

"""チャット一覧取得用フィルター"""
input ChatFilter{
    ledgerId: Int!
    first: Int!
    last: Int!
}

"""チャット"""
type Chat{
    "id"
    id: Int!
    "家計簿ID"
    ledgerId: Int!
    "ユーザID"
    userId: Int!
    "コメント"
    comment: String!
    "作成日"
    createdAt: Date!
    "ニックネーム"
    nickname: String!
}

"""チャット作成入力"""
input NewChat{
    "家計簿ID"
    ledgerId: Int!
    "ユーザID"
    userId: Int!
    "コメント"
    comment: String!
}

"""貯金関連"""
type Saving{
    "貯金取得"
    savingDetail(userId: Int!): Savings!
    "貯金額・収入額の和を返す"
    savingAmount(userId: Int!): SavingAmountList!
    "貯金詳細リスト取得"
    savingsDetails(input: savingsDetailsFilter!): [SavingsDetail!]!
}

"""貯金"""
type Savings{
    "id"
    id: Int!
    "ユーザID"
    userId: Int!
    "目標貯金額"
    targetAmount: Int!
}

"""貯金額と収入額の和"""
type SavingAmountList{
    savingAmount: Int!
    expenseAmount: Int!
}

"""貯金詳細"""
type SavingsDetail{
    "ID"
    id: ID!
    "貯金ID"
    saving_id: Int!
    "貯金金額"
    saving_amount: Int!
    "貯金日"
    saving_date: Date!
    "メモ"
    note: String!
}

"""貯金詳細取得フィルター"""
input savingsDetailsFilter{
    "貯金ID"
    savings_id: Int!
    "取得開始列"
    first: Int!
    "取得終了列"
    last: Int!
}

# 家計簿関連
"""家計簿関連"""
type LedgerEtc{
    "カテゴリ一覧"
    categoryList: [Category!]!
    "家計簿リスト取得"
    ledgers(userId: Int!): [Ledger!]!
    "家計簿取得"
    ledger(id: Int!): Ledger!
    "共有家計簿リスト取得"
    shareLedgers(userId: Int!): [Ledger!]!
}

"""家計簿"""
type Ledger{
    "ID"
    id: Int!
    "ユーザID"
    userId: Int!
    "アドバイザIDあれば"
    adviserId: Int!
    "グループIDあれば"
    groupId: Int!
    "名前"
    name: String!
    "作成日"
    created_at: Date!
    "収入リスト"
    incomes: [Income!]!
    "支出リスト"
    expenses: [Expense!]!
}

"""収入"""
type Income{
    "ID"
    id: Int!
    "家計簿ID"
    ledgerId: Int!
    "カテゴリID"
    categoryId: Int!
    "カテゴリ"
    category: Category!
    "日付"
    date: Date!
    "金額"
    amount: Int!
    "メモ"
    note: String!
}

"""支出"""
type Expense{
    "ID"
    id: Int!
    "家計簿ID"
    ledgerId: Int!
    "カテゴリID"
    categoryId: Int!
    "カテゴリ"
    category: Category!
    "日付"
    date: Date!
    "金額"
    amount: Int!
    "メモ"
    note: String!
}

"""カテゴリ"""
type Category{
    "id"
    Id: Int!
    "名前"
    Name: String!
    "作成日"
    created_at: Date!
}

"""家計簿テーブル作成"""
input NewLedger{
    "ユーザID"
    userId: Int!
    "家計簿名"
    name: String!
}

"""家計簿の収入詳細の入力"""
input NewIncomeDetail{
    "家計簿ID"
    ledgerId: Int!
    "カテゴリID"
    categoryId: Int!
    "日付"
    date: Date!
    "収入額"
    amount: Int!
    "メモ"
    note: String!
}

"""家計簿の支出詳細の入力"""
input NewExpenseDetail{
    "家計簿ID"
    ledgerId: Int!
    "カテゴリID"
    categoryId: Int!
    "日付"
    date: Date!
    "支出額"
    amount: Int!
    "メモ"
    note: String!
}

input NewSaving {
  userId: String!
}

"""貯金詳細用入力"""
input NewSavingDetail{
    "貯金ID"
    savingId: Int!
    "貯金額"
    savingAmount: Int!
    "貯金をした日付"
    savingDate: Date!
    "メモ"
    note: String!
}

type Query {
  """ログイン用クエリ"""
  login(input: LoginInfo!): User!
  """チャット一覧"""
  chatList(input: ChatFilter!): [Chat!]!
  """貯金関連クエリ"""
  saving: Saving!
  """家計簿関連クエリ"""
  ledger: LedgerEtc!
}

type Mutation {
  "ユーザ登録"
  createUser(input: NewUser): User
  "グループ作成"
  createGroup(input: NewGroup): Int
  "チャット登録"
  createChat(input: NewChat): Int
  "貯金詳細作成"
  createSavingDetail(input: NewSavingDetail): Int
  "家計簿収入詳細作成"
  createIncomeDetail(input: NewIncomeDetail): Int
  "家計簿支出詳細作成"
  createExpenseDetail(input: NewExpenseDetail): Int
  "家計簿作成"
  createLedger(input: NewLedger): Int
  "グループ削除"
  deleteGroup(groupId: Int!): Int
}