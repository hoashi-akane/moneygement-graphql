# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Date

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

"""ユーザ関連"""
type User {
  "ユーザID"
  id: ID!
  "本名"
  name: String!
  "別称"
  nickname: String!
  "メールアドレス"
  email: String!
}



"""貯金詳細"""
type SavingsDetail{
    "ID"
    id: ID!
    "貯金ID"
    saving_id: Int!
    "貯金金額"
    saving_amount: Int!
    "貯金日"
    saving_date: Date!
    "メモ"
    note: String!
}

"""貯金詳細取得フィルター"""
input savingsDetailsFilter{
    "貯金ID"
    savings_id: Int!
    "取得開始列"
    first: Int!
    "取得終了列"
    last: Int!
}

# 家計簿関連
"""
家計簿の収入詳細の入力
"""
input NewIncomeDetail{
    "収入"
    incomeId: Int!
    "カテゴリID"
    categoryId: Int!
    "日付"
    date: Date!
    "収入額"
    amount: Int!
    "メモ"
    note: String!
}

"""
家計簿の支出詳細の入力
"""
input NewExpenseDetail{
    "支出ID"
    expenseId: Int!
    "カテゴリID"
    categoryId: Int!
    "日付"
    date: Date!
    "支出額"
    amount: Int!
    "メモ"
    note: String!
}

type Query {
  todos: [Todo!]!

}

input NewTodo {
  text: String
  userId: String!
}

input NewSaving {
  userId: String!
}

input NewSavingDetail{
    savingId: Int!
    savingAmount: Int!
    savingDate: Date!
    note: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
  """貯金詳細作成"""
  createSavingDetail(input: NewSavingDetail): Int
  """家計簿収入詳細作成"""
  createIncomeDetail(input: NewIncomeDetail): Int
  """家計簿支出詳細作成"""
  createExpenseDetail(input: NewExpenseDetail): Int
}